package edu.kit.isco.KitAlumniApp.server.dataobject;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * This class represents a user device
 * @author Alexander Mueller
 *
 */
@XmlRootElement
@Entity
@Table(name = "user")
public class DataAccessUser implements DataAccessObject {
	
	/**
	 * The database id of a user object
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long Id=0;

	/**
	 * This represents a user devices registration ID, generated by the GCM-Service
	 */
	@Column(name = "client_id")
	private String clientId;
	
	/**
	 * The list of job categories a user is interested in
	 */
	@ManyToMany
	@JoinTable(name = "user_tag",
	joinColumns={@JoinColumn(name = "user_id", referencedColumnName = "Id")},
	inverseJoinColumns={@JoinColumn(name = "tag_id", referencedColumnName = "Id")})
	private List<DataAccessTag> tags;
	
	/**
	 * A randomly generated password to provide more safety
	 */
	@Column(name = "password")
	private String password;
	
	/**
	 * Empty constructor required for hibernate
	 */
	public DataAccessUser(){}
	
	/**
	 * Creates a user object with a client id, a list of job categories and a password
	 * @param clientId the registration id of the users device
	 * @param tags the list of job categories the user is interested in
	 * @param password the randomly generated password
	 */
	public DataAccessUser(String clientId, List<DataAccessTag> tags, String password) {
		this.clientId = clientId;
		this.tags = tags;
		this.password = password;
	}
	
	/**
	 * Returns the database id of the user
	 * @return the database id of the user
	 */
	public long getId() { return this.Id; }
	
	/**
	 * Returns the users registration id
	 * @return the users registration id
	 */
	public String getClientId() {return this.clientId;}
	
	/**
	 * Returns the users password
	 * @return the users password
	 */
	public String getPassword() {return this.password;}
	
	/**
	 * Returns the list of job categories the user is interested in
	 * @return the list of job categories
	 */
	public List<DataAccessTag> getTags() { return this.tags;}
	
	/**
	 * Sets the database id of the user
	 * @param Id the new database id
	 */
	public void setId(long Id) { this.Id = Id; }
	
	/**
	 * Sets the registration id for a user
	 * @param clientId the new registration id
	 */
	public void setClientId(String clientId) {this.clientId = clientId;}
	
	/**
	 * Sets the password for a user
	 * @param password the new password
	 */
	public void setPassword(String password) {this.password = password;}
	
	/**
	 * Sets the list of job categories for a user
	 * @param tags new list of job categories
	 */
	public void setTags(List<DataAccessTag> tags) {this.tags = tags;}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		DataAccessUser other = (DataAccessUser) obj;
		if (clientId == null) {
			if (other.clientId != null) {
				return false;
			}
		} else if (!clientId.equals(other.clientId)) {
			return false;
		}
		if (password == null) {
			if (other.password != null) {
				return false;
			}
		} else if (!password.equals(other.password)) {
			return false;
		}
		return true;
	}
}
